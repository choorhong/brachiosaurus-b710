import { RequestHandler } from 'express'
import Vessel from '../db/models/vessel'
import { ErrorMessage } from '../types/error'
import { BaseController } from './base'

export default class VesselController extends BaseController {
  public create: RequestHandler = async (req, res) => {
    const { name, earliestReturningDate = new Date(), cutOff = new Date(), remarks } = req.body
    if (!name || !earliestReturningDate || !cutOff) return this.clientError(res, ErrorMessage.MISSING_DATA)

    try {
      const vessel = await Vessel.create({
        // id, // will be auto generated by the db (defaultValue: DataTypes.UUIDV4)
        name,
        earliestReturningDate,
        cutOff,
        remarks
      })
      return this.created(res, vessel)
    } catch (createError) {
      return this.fail(res, createError)
    }
  }

  public read: RequestHandler = async (req, res) => {
    const { id } = req.params
    try {
      const vessel = await Vessel.findByPk(id)
      if (!vessel) return this.notFound(res)
      return this.ok(res, vessel)
      // return res.status(200).json(vessel)
    } catch (createError) {
      return this.fail(res, createError)
    }
  }

  public update: RequestHandler = async (req, res) => {
    const { id, name, earliestReturningDate = new Date(), cutOff = new Date(), remarks } = req.body
    if (!id || !name || !earliestReturningDate || !cutOff) return this.clientError(res, ErrorMessage.MISSING_DATA)
    try {
      const [numOfUpdatedVessels, updatedVessels] = await Vessel.update({
        name,
        earliestReturningDate,
        cutOff,
        remarks
      }, {
        where: { id },
        returning: true
      })
      return this.ok(res, updatedVessels)
    } catch (updateError) {
      return this.fail(res, updateError)
    }
  }

  public remove: RequestHandler = async (req, res) => {
    const { id } = req.params
    try {
      await Vessel.destroy({
        where: { id }
      })
      return this.ok(res)
    } catch (removeError) {
      return this.fail(res, removeError)
    }
  }
}

// export const create = async (req: Request, res: Response) => {
//   const { name, earliestReturningDate, cutOff, remarks } = req.body
//   if (!name || !earliestReturningDate || !cutOff) return res.status(400).json({ err: 'Missing data' })
//   const id = generateUUID()
//   try {
//     const vessel = await Vessel.create({
//       id,
//       name,
//       earliestReturningDate,
//       cutOff,
//       remarks
//     })
//     return res.status(201).json(vessel)
//   } catch (createError) {
//     return res.status(500).json({ err: createError.toString() })
//   }
// }

// export const read = async (req: Request, res: Response) => {
//   const { id } = req.params
//   try {
//     const vessel = await Vessel.findByPk(id)
//     if (!vessel) return res.status(404).send()
//     return res.status(200).json(vessel)
//   } catch (findError) {
//     return res.status(500).json({ err: findError.toString() })
//   }
// }

// export const update = async (req: Request, res: Response) => {
//   const { id, name, earliestReturningDate, cutOff, remarks } = req.body
//   if (!id || !name || !earliestReturningDate || !cutOff) return res.status(400).json({ err: 'Missing data' })
//   try {
//     const vessel = await Vessel.update({
//       name,
//       earliestReturningDate,
//       cutOff,
//       remarks
//     }, {
//       where: { id }
//     })
//     return res.status(200).json(vessel)
//   } catch (updateError) {
//     return res.status(500).json({ err: updateError.toString() })
//   }
// }

// export const remove = async (req: Request, res: Response) => {
//   const { id } = req.params
//   try {
//     await Vessel.destroy({
//       where: { id }
//     })
//     return res.status(200).send('ok')
//   } catch (deleteError) {
//     return res.status(500).json({ err: deleteError.toString() })
//   }
// }
