import { RequestHandler } from 'express'
import User from '../db/models/user'
import { ErrorMessage } from '../types/error'
import { ROLES, STATUS } from '../types/user'
import { isEmpty } from '../utils/helpers'
import { BaseController } from './base'

export default class AuthController extends BaseController {
  public createOrFindUser: RequestHandler = async (req, res, next) => {
    try {
      const { firebaseUser } = res.locals
      if (!firebaseUser) throw new Error()

      const [user, created] = await User.findOrCreate({
        where: { email: firebaseUser.email },
        defaults: {
          // id: userId, // will be auto generated by the db
          name: firebaseUser.name,
          firebaseUserId: firebaseUser.firebaseUserId,
          email: firebaseUser.email,
          role: ROLES.EXECUTIVE,
          status: STATUS.PENDING
        }
      })
      // If user has just been created
      if (created) return this.created(res, user)

      // User exists > next (Eg: when user refreshes the page)
      this.ok(res, user)
      next()
    } catch (err) {
      console.log('err', err)
      return this.unauthorized(res, ErrorMessage.INVALID_OR_EXPIRED_TOKEN)
    }
  }

  public update: RequestHandler = async (req, res, next) => {
    const { id, name } = req.body
    const bodyArr = [id, name]

    if (isEmpty(bodyArr)) return this.clientError(res, ErrorMessage.MISSING_DATA)

    try {
      const [numOfUpdatedUsers, updatedUsers] = await User.update({ name }, { where: { id } })
      return this.ok(res, updatedUsers)
    } catch (updateError) {
      return this.fail(res, updateError)
    }
  }

  public getAll: RequestHandler = async (req, res) => {
    try {
      const users = await User.findAll()
      if (!users) return this.notFound(res)
      return this.ok(res, users)
    } catch (error) {
      return this.fail(res, error)
    }
  }

  public read: RequestHandler = async (req, res) => {
    const { id } = req.params

    try {
      const user = await User.findByPk(id)
      if (!user) return this.notFound(res)
      return this.ok(res, user)
    } catch (readError) {
      return this.fail(res, readError)
    }
  }

  public updateRoleStatus: RequestHandler = async (req, res) => {
    const id = req.params.id
    const { role, status } = req.body
    if (!id || (role && !Object.values(ROLES).includes(role)) || (status && !Object.values(STATUS).includes(status))) return this.clientError(res, ErrorMessage.MISSING_DATA)
    try {
      const [numOfUpdatedUsers, updatedUsers] = await User.update({
        role,
        status
      }, {
        where: {
          id
        }
      })
      return this.ok(res, updatedUsers)
    } catch (updateError) {
      return this.fail(res, updateError)
    }
  }
}
