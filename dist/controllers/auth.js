"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const user_1 = __importDefault(require("../db/models/user"));
const error_1 = require("../types/error");
const user_2 = require("../types/user");
const helpers_1 = require("../utils/helpers");
const base_1 = require("./base");
class AuthController extends base_1.BaseController {
    constructor() {
        super(...arguments);
        this.createOrFindUser = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { firebaseUser } = res.locals;
                if (!firebaseUser)
                    throw new Error();
                const [user, created] = yield user_1.default.findOrCreate({
                    where: { email: firebaseUser.email },
                    defaults: {
                        // id: userId, // will be auto generated by the db
                        name: firebaseUser.name,
                        firebaseUserId: firebaseUser.firebaseUserId,
                        email: firebaseUser.email,
                        role: user_2.ROLES.EXECUTIVE,
                        status: user_2.STATUS.PENDING
                    }
                });
                // If user has just been created
                if (created)
                    return this.created(res, user);
                // User exists > next (Eg: when user refreshes the page)
                this.ok(res, user);
                next();
            }
            catch (err) {
                console.log('err', err);
                return this.unauthorized(res, error_1.ErrorMessage.INVALID_OR_EXPIRED_TOKEN);
            }
        });
        this.update = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const { id, name } = req.body;
            const bodyArr = [id, name];
            if (helpers_1.isEmpty(bodyArr))
                return this.clientError(res, error_1.ErrorMessage.MISSING_DATA);
            try {
                const [numOfUpdatedUsers, updatedUsers] = yield user_1.default.update({ name }, { where: { id } });
                return this.ok(res, updatedUsers);
            }
            catch (updateError) {
                return this.fail(res, updateError);
            }
        });
    }
}
exports.default = AuthController;
